{
    // Place your PSIAM.Universal workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
    "Pester - Private Unit Test": {
        "scope": "powershell",
        "prefix": "pester-private",
        "body": [
            "#-------------------------------------------------------------------------",
            "Set-Location -Path \\$PSScriptRoot",
            "#-------------------------------------------------------------------------",
            "\\$ModuleName = '${WORKSPACE_NAME}'",
            "\\$PathToManifest = [System.IO.Path]::Combine('..', '..', '..', \\$ModuleName, \"\\$ModuleName.psd1\")",
            "#-------------------------------------------------------------------------",
            "if (Get-Module -Name \\$ModuleName -ErrorAction 'SilentlyContinue') {",
            "    #if the module is already in memory, remove it",
            "    Remove-Module -Name \\$ModuleName -Force",
            "}",
            "Import-Module \\$PathToManifest -Force",
            "#-------------------------------------------------------------------------",
            "",
            "InModuleScope '${WORKSPACE_NAME}' {",
            "    Describe '${TM_FILENAME_BASE/(.*)\\..+$/$1/} Private Function Tests' -Tag Unit {",
            "        Context 'Exceptions' {",
            "            ${LINE_COMMENT} It 'should ...' {",
            "",
            "            ${LINE_COMMENT} }",
            "        }",
            "        Context 'Success' {",
            "            ${LINE_COMMENT} It 'should ...' {",
            "",
            "            ${LINE_COMMENT} }",
            "        }",
            "    }",
            "}"
        ],
        "description": "Pester - Private Unit Test"
    },
    "Pester - Public Unit Test": {
        "scope": "powershell",
        "prefix": "pester-public",
        "body": [
            "#-------------------------------------------------------------------------",
            "Set-Location -Path \\$PSScriptRoot",
            "#-------------------------------------------------------------------------",
            "\\$ModuleName = '${WORKSPACE_NAME}'",
            "\\$PathToManifest = [System.IO.Path]::Combine('..', '..', '..', \\$ModuleName, \"\\$ModuleName.psd1\")",
            "#-------------------------------------------------------------------------",
            "if (Get-Module -Name \\$ModuleName -ErrorAction 'SilentlyContinue') {",
            "    #if the module is already in memory, remove it",
            "    Remove-Module -Name \\$ModuleName -Force",
            "}",
            "Import-Module \\$PathToManifest -Force",
            "#-------------------------------------------------------------------------",
            "",
            "InModuleScope '${WORKSPACE_NAME}' {",
            "    Describe '${TM_FILENAME_BASE/(.*)\\..+$/$1/} Public Function Tests' -Tag Unit {",
            "        BeforeAll {",
            "            ${LINE_COMMENT} Setup actions, mocks, variables etc.",
            "        }",
            "        Context 'Exceptions' {",
            "            ${LINE_COMMENT} It 'should ...' {",
            "",
            "            ${LINE_COMMENT} }",
            "        }",
            "        Context 'Success' {",
            "            ${LINE_COMMENT} It 'should ...' {",
            "",
            "            ${LINE_COMMENT} }",
            "        }",
            "    }",
            "}"
        ],
    },
    "Pester - Module Mock": {
        "scope": "powershell",
        "prefix": "pester-module-scoped-mock",
        "body": [
            "Mock -ModuleName '${WORKSPACE_NAME}' -CommandName 'Get-FunctionName' -MockWith {",
            "    ${LINE_COMMENT} Mocked function",
            "}"
        ],
        "description": "Pester - Module Mock"
    },
    "Pester - Function Mock": {
        "scope": "powershell",
        "prefix": "pester-function-scoped-mock",
        "body": [
            "Mock -CommandName 'Get-FunctionName' -MockWith {",
            "    ${LINE_COMMENT} Mocked function",
            "}"
        ],
        "description": "Pester - Function Mock"
    },
}